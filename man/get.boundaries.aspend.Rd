% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boundaries.R
\name{get.boundaries.aspend}
\alias{get.boundaries.aspend}
\title{Derive boundaries with alpha-spending.}
\usage{
get.boundaries.aspend(
  a.func,
  a,
  rates,
  N,
  n_sims,
  stat.func,
  data.generator,
  ...
)
}
\arguments{
\item{a.func}{A continuous, monotonic increasing function of t
where a.func(a, t=0) = 0 and a.func(a, t=1) = a
where a is the type I error desired}

\item{a}{The type I error desired}

\item{rates}{A vector of information rates (between 0 and 1)}

\item{N}{maximum total sample size}

\item{n_sims}{Number of Monte-Carlo simulations}

\item{stat.func}{Function (or list of functions)
to calculate the test statistic based on the generated data, at each
observed information rates. If this is a list
of functions, it needs to be the same length as the sequence of boundaries.}

\item{data.generator}{Function to generate data. The output of this function
should be a matrix, which is the input for stat.func.
First argument of this function needs to be n, the sample size, and the function
needs to be vectorized.}
}
\description{
Get the boundaries required for a particular alpha-spending function
and an observed information rate out of a total sample size.
}
\details{
Your data generator in this case needs to be the data generation
under the null hypothesis in order for this function to work correctly
with alpha-spending.
}
\examples{
set.seed(101)
# information rates
t <- 1:3/3

# approximate Pocock boundaries
a.func.pocock <- function(a, t) a * log(1 + (exp(1) - 1) * t)
get.boundaries.aspend(a.func=a.func.pocock, a=0.05,
                      rates=t, N=1000, n_sims=1000,
                      stat.func=function(x) mean(x) * sqrt(length(x)),
                      data.generator=function(n) rnorm(n))

# approximate O'Brien-Fleming boundaries
a.func.obf <- function(a, t) 4 * (1 - pnorm(qnorm(1-a/4)/sqrt(t)))
get.boundaries.aspend(a.func=a.func.obf, a=0.05,
                      rates=t, N=1000, n_sims=1000,
                      stat.func=function(x) mean(x) * sqrt(length(x)),
                      data.generator=function(n) rnorm(n))
}
